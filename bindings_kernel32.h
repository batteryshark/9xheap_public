#pragma once

typedef HANDLE __stdcall tHeapCreate(DWORD  flOptions,SIZE_T dwInitialSize,SIZE_T dwMaximumSize);
typedef BOOL __stdcall tHeapDestroy(HANDLE hHeap);
typedef BOOL __stdcall tHeapValidate(HANDLE  hHeap,DWORD   dwFlags,LPCVOID lpMem);
typedef SIZE_T __stdcall tHeapCompact(HANDLE hHeap, DWORD  dwFlags);
typedef BOOL __stdcall tHeapWalk(HANDLE hHeap, LPPROCESS_HEAP_ENTRY lpEntry);
typedef BOOL __stdcall tHeapLock(HANDLE hHeap);
typedef BOOL __stdcall tHeapUnlock(HANDLE hHeap);
typedef HANDLE __stdcall tGetProcessHeap();
typedef HLOCAL __stdcall tLocalAlloc(UINT uFlags, SIZE_T uBytes);
typedef HLOCAL __stdcall tLocalFree(_Frees_ptr_opt_ HLOCAL hMem);
typedef HLOCAL __stdcall tLocalReAlloc(_Frees_ptr_opt_ HLOCAL hMem, SIZE_T uBytes, UINT uFlags);
typedef LPVOID __stdcall tLocalLock(HLOCAL hMem);
typedef BOOL __stdcall tLocalUnlock(HLOCAL hMem);
typedef HLOCAL __stdcall tLocalHandle(LPCVOID pMem);
typedef SIZE_T __stdcall tLocalSize(HLOCAL hMem);
typedef UINT __stdcall tLocalFlags(HLOCAL hMem);
typedef HGLOBAL __stdcall tGlobalAlloc(UINT uFlags,SIZE_T dwBytes);
typedef HGLOBAL __stdcall tGlobalFree(_Frees_ptr_opt_ HGLOBAL hMem);
typedef  HGLOBAL __stdcall tGlobalReAlloc(_Frees_ptr_ HGLOBAL hMem,SIZE_T dwBytes, UINT uFlags);
typedef LPVOID __stdcall tGlobalLock(HGLOBAL hMem);
typedef BOOL __stdcall tGlobalUnlock(HLOCAL hMem);
typedef HGLOBAL __stdcall tGlobalHandle(LPCVOID pMem);
typedef SIZE_T __stdcall tGlobalSize(HGLOBAL hMem);
typedef UINT __stdcall tGlobalFlags(HGLOBAL hMem);

extern tHeapCreate* o_HeapCreate;
extern tHeapDestroy* o_HeapDestroy;
extern tHeapValidate* o_HeapValidate;
extern tHeapCompact* o_HeapCompact;
extern tHeapWalk* o_HeapWalk;
extern tHeapLock* o_HeapLock;
extern tHeapUnlock* o_HeapUnlock;
extern tGetProcessHeap* o_GetProcessHeap;
extern tLocalAlloc* o_LocalAlloc;
extern tLocalFree* o_LocalFree;
extern tLocalReAlloc* o_LocalReAlloc;
extern tLocalLock* o_LocalLock;
extern tLocalUnlock* o_LocalUnlock;
extern tLocalHandle* o_LocalHandle;
extern tLocalSize* o_LocalSize;
extern tLocalFlags* o_LocalFlags;
extern tGlobalAlloc* o_GlobalAlloc;
extern tGlobalFree* o_GlobalFree;
extern tGlobalReAlloc* o_GlobalReAlloc;
extern tGlobalLock* o_GlobalLock;
extern tGlobalUnlock* o_GlobalUnlock;
extern tGlobalHandle* o_GlobalHandle;
extern tGlobalSize* o_GlobalSize;
extern tGlobalFlags* o_GlobalFlags;

HANDLE __stdcall h_HeapCreate(DWORD  flOptions, SIZE_T dwInitialSize, SIZE_T dwMaximumSize);
BOOL __stdcall h_HeapDestroy(HANDLE hHeap);
BOOL __stdcall h_HeapValidate(HANDLE  hHeap, DWORD   dwFlags, LPCVOID lpMem);
SIZE_T __stdcall h_HeapCompact(HANDLE hHeap, DWORD  dwFlags);
BOOL __stdcall h_HeapWalk(HANDLE hHeap, LPPROCESS_HEAP_ENTRY lpEntry);
BOOL __stdcall h_HeapLock(HANDLE hHeap);
BOOL __stdcall h_HeapUnlock(HANDLE hHeap);
HANDLE __stdcall h_GetProcessHeap();
DECLSPEC_ALLOCATOR HLOCAL __stdcall h_LocalAlloc(UINT   uFlags, SIZE_T uBytes);
HLOCAL __stdcall h_LocalFree(_Frees_ptr_opt_ HLOCAL hMem);
DECLSPEC_ALLOCATOR HLOCAL __stdcall h_LocalReAlloc(_Frees_ptr_opt_ HLOCAL hMem, SIZE_T uBytes, UINT uFlags);
LPVOID __stdcall h_LocalLock(HLOCAL hMem);
BOOL __stdcall h_LocalUnlock(HLOCAL hMem);
HLOCAL __stdcall h_LocalHandle(LPCVOID pMem);
SIZE_T __stdcall h_LocalSize(HLOCAL hMem);
UINT __stdcall h_LocalFlags(HLOCAL hMem);
DECLSPEC_ALLOCATOR HGLOBAL __stdcall h_GlobalAlloc(UINT uFlags, SIZE_T dwBytes);
HGLOBAL __stdcall h_GlobalFree(_Frees_ptr_opt_ HGLOBAL hMem);
DECLSPEC_ALLOCATOR HGLOBAL __stdcall h_GlobalReAlloc(_Frees_ptr_ HGLOBAL hMem, SIZE_T dwBytes, UINT uFlags);
LPVOID __stdcall h_GlobalLock(HGLOBAL hMem);
BOOL __stdcall h_GlobalUnlock(HLOCAL hMem);
HGLOBAL __stdcall h_GlobalHandle(LPCVOID pMem);
SIZE_T __stdcall h_GlobalSize(HGLOBAL hMem);
UINT __stdcall h_GlobalFlags(HGLOBAL hMem);
